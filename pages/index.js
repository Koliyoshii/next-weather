import Head from "next/head";
import Image from "next/image";
import bg from "../public/images/bad-weather.jpg";
import { useEffect, useState, useCallback } from "react";

import SearchForm from "../components/SearchForm";
import Weather from "../components/Weather/Weather";
import LoadingSpinner from "../components/ui/LoadingSpinner";
import Container from "../components/ui/Container";
import Layout from "../components/ui/Layout";
import ErrorIndicator from "../components/ui/ErrorIndicator";

const DUMMY_CITIES = [
  {
    city: "MÃ¼nchen",
    isFavorite: true,
  },
  {
    city: "Berlin",
    isFavorite: false,
  },
  {
    city: "Stuttgart",
    isFavorite: false,
  },
  {
    city: "Hamburg",
    isFavorite: false,
  },
];

export default function Home() {
  //Initial city states
  const [weatherData, setWeatherData] = useState([]);
  const [hasLoaded, setHasLoaded] = useState(false);

  //Search city states
  const [searchCityWeather, setSearchCityWeather] = useState([]);
  const [searchCity, setSearchCity] = useState("");

  //loading and error states
  const [isLoading, setIsLoading] = useState(false);
  const [hasError, setHasError] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");

  //Initial weather of cities
  useEffect(() => {
    const fetchWeather = async (cityNames) => {
      for (const elem of cityNames) {
        const city = elem.city;
        setIsLoading(true);
        const url = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=999c6ee311cf78c9e96aa7336da0796f`;
        const response = await fetch(url);

        if (!response.ok) {
          throw new Error("Something went wrong");
        }

        const responseData = await response.json();
        setWeatherData((prevState) => [...prevState, responseData]);
        setIsLoading(false);
      }

      setHasLoaded(true);
      setHasError(false);
    };

    try {
      fetchWeather(DUMMY_CITIES);
    } catch (error) {
      console.log("Error");
      setHasError(true);
      setHasLoaded(false);
      setErrorMessage(
        "Something went wrong. Did you searched for a real city?"
      );
      console.log(error);
    }
  }, []);

  useEffect(() => {
    if (isLoading) {
      const timer = setTimeout(() => setIsLoading(false), 1000);
      return () => clearTimeout(timer);
    }
  }, [isLoading]);

  const handleSearch = async (event) => {
    event.preventDefault();
    try {
      setIsLoading(true);
      const url = `https://api.openweathermap.org/data/2.5/weather?q=${searchCity}&units=metric&appid=999c6ee311cf78c9e96aa7336da0796f`;
      const response = await fetch(url);

      if (!response.ok) {
        throw new Error("Something went wrong");
      }

      const responseData = await response.json();
      setSearchCityWeather((prevState) => [responseData, ...prevState]);
      //setSearchCityWeather(responseData);
      setIsLoading(false);
      setHasError(false);
    } catch (error) {
      console.log("Error");
      setHasError(true);
      setErrorMessage(
        "Something went wrong. Did you searched for a real city?"
      );
      console.log(error);
    }
  };

  const handleCityChange = (event) => {
    setSearchCity(event.target.value);
  };

  return (
    <div>
      <Head>
        <title>Weather - Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* Search */}
      <Container>
        <SearchForm onCityChange={handleCityChange} onSearch={handleSearch} />
        {hasError && <ErrorIndicator />}
        {isLoading && <LoadingSpinner />}
        <Weather weatherData={searchCityWeather} />
      </Container>

      {/* Weather */}
      <Container>
        {hasLoaded && (
          <Weather weatherData={weatherData} isFavorite={DUMMY_CITIES} />
        )}
      </Container>
    </div>
  );
}

